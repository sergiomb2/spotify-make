# Makefile is generated from Makefile.in by configure
# Don't edit Makefile, your changes will be lost.

SHELL        := /bin/bash

help_msg      = \
Plain 'make' doesn't do anything. Targets: \n\
   - download:   Download all sources \n\
   - install:    Install, possibly using DESTDIR to define location. \n\
   - register:   Notify system about new desktop icons etc. \n\
   - uninstall:  Remove everything installed.

PATH          = @path@
dist          = @dist@
arch          = @arch@
archlib       = @archlib@
binary        = @binary@
repo          = http://repository.spotify.com/pool/non-free/s/spotify-client
version       = @version@
archive       = @archive@
so_perms      = @so_perms@
prefix        = @prefix@
libdir        = @libdir@
datadir       = @datadir@
bindir        = @bindir@
mandir        = @mandir@
app_libdir    = $(libdir)/spotify-client
app_datadir   = $(datadir)/spotify-client

DOCS          =


SOURCES       = spotify.bash spotify.1 spotify.desktop $(archive)

lib_to_data  := $(shell python3 -c 'import os.path; 		\
					print(os.path.relpath("$(app_datadir)",	\
					"$(app_libdir)"))')
all: help

lib_to_data:
	echo lib_to_data: $(lib_to_data)

help:
	@echo -e "\n$(help_msg)\n"

download: $(archive)
	@# Download all platform sources

download-all: download
	@# Download all architectures.
	tarball=$(archive); \
	[[ $$tarball = *386* ]] && \
	    other=$${tarball/i386/amd64} || other=$${tarball/amd64/i386}; \
	wget -Nq $(repo)/$$other

check_sources:
	@test -f $(archive) || {                                    \
	    echo "$(archive) not available (try 'make download')";  \
	    exit 1;                                                 \
	}

$(archive):
	wget -Nq -O $@ $(repo)/$@

unpack: check_sources
	@# Unpack into libdir (arched files) and datadir(noarch).
	ar x $(archive)
	tar xf data.tar.xz
	@rm -rf $(DESTDIR)$(app_libdir) $(DESTDIR)/$(app_datadir)
	@mkdir -p $(DESTDIR)$(app_libdir)/Data || :
	@mkdir -p $(DESTDIR)$(app_datadir) || :
	cp -ar ./usr/share/spotify/*  $(DESTDIR)$(app_datadir)
	mv $(DESTDIR)$(app_datadir)/libcef.so $(DESTDIR)$(app_libdir)
	cp ./usr/bin/spotify $(DESTDIR)$(app_libdir)
	tar xf control.tar.xz
	@rm -f prerm postinst

set_so_perms: unpack
	@# Set so files perms to 755 (e. g, fedora) or 644 (e. g. debian).
	chmod $(so_perms) \
	    $$( find $(DESTDIR)$(app_libdir) -name '*.so*' -writable)

bundled:  check_sources unpack
	[ -n "$(DOCS)" ] && cp -a $(DOCS) $(DESTDIR)$(app_datadir) || :

appdata:
	mkdir -p $(DESTDIR)$(datadir)/appdata  || echo '(ignored)'
	cp appdata.xml $(DESTDIR)$(datadir)/appdata/spotify.xml

desktop:  unpack check_sources appdata
	@# Install icons, desktop file etc.
	@icondir="$(DESTDIR)$(datadir)/icons/hicolor";                   \
	src_icons="$(DESTDIR)$(app_datadir)/icons";                      \
	echo "Installing icons in $$icondir";                            \
	for size in 24 32 48 64 128 256; do                              \
	    install -m 644 -pD  $$src_icons/spotify-linux-$$size.png     \
	        $$icondir/$${size}x$${size}/apps/spotify-client.png;     \
	done
	[ -d $(DESTDIR)$(datadir)/applications ] ||                      \
	    mkdir  $(DESTDIR)$(datadir)/applications
	desktop-file-install --dir $(DESTDIR)$(datadir)/applications     \
	    spotify.desktop
	[ "$(dist)" = 'Ubuntu' ] && chmod 755                            \
	    $(DESTDIR)$(datadir)/applications/spotify.desktop  || :

addons: check_sources
	@#  Manpage and wrapper script
	install -m 755 -pD spotify.bash $(DESTDIR)$(bindir)/$(binary)
	install -m 644 -pD spotify.1 $(DESTDIR)$(mandir)/man1/$(binary).1

install: unpack addons bundled desktop set_so_perms
	cp Makefile $(DESTDIR)$(app_datadir)
	cp README.md  $(DESTDIR)$(app_datadir)


check-deps:
	@deps=$$( ldd $(DESTDIR)$(app_libdir)/spotify-bin        \
	              | grep 'not.*found' );                     \
	if [ -z "$$deps" ]; then                                 \
	    echo "OK";                                           \
	    exit 0;                                              \
	else                                                     \
	    echo "Error: unresolved dependencies"; echo $$deps;  \
	    exit 1;                                              \
	fi

register:
	@# Register icons and check desktop file. Not done by default, makes
	@# no sense for a temporary install e. g., when packaging.
	-gtk-update-icon-cache --ignore-theme-index \
	    $(DESTDIR)$(datadir)/icons/hicolor
	-desktop-file-validate \
	    $(DESTDIR)$(datadir)/applications/spotify.desktop
	-update-desktop-database  $(DESTDIR)$(datadir)/applications

uninstall:
	rm -rf $(DESTDIR)$(app_datadir)
	rm -rf $(DESTDIR)$(app_libdir)
	rm -f  $(DESTDIR)$(bindir)/spotify
	rm -f  $(DESTDIR)$(datadir)/icons/hicolor/*/apps/spotify-client.png
	rm -f  $(DESTDIR)$(mandir)/man1/spotify.1
	rm -f  $(DESTDIR)$(datadir)/applications/spotify.desktop

clean:
	rm -rf $(archive) spotify.bash opt usr
	rm -rf control.tar.xz data.tar.xz *.deb debian-binary github
	rm -f spotify.desktop Makefile
